#!/usr/bin/env python
r""" Temporary script to convert the csv output of codepeer to a Code Climate
     json report, which can be parsed by GitLab.
"""

import argparse
import hashlib
import json
import os

from csv import DictReader
from typing import List


SEVERITY_MAP = {
    "annotation": "info",
    "info": "info",
    "low": "minor",
    "medium": "major",
    "high": "critical",
    "suppressed": "info",
}


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--input",
        default="codepeer.csv",
        help="Path to the csv file to parse. Defaults to codepeer.csv",
    )
    parser.add_argument(
        "--output",
        default="code_quality_report.json",
        help="Path to the json file to output. Defaults to code_quality_report.json",
    )
    parser.add_argument(
        "--base_path",
        default=os.getcwd(),
        help="Base path to remove from absolute paths to make them relative. Defaults to cwd",
    )
    return parser.parse_args()


def generate_report_content(file_path: str, base_path: str) -> List[dict]:
    report = []
    with open(file_path, "r") as f:
        reader = DictReader(f)
        for row in reader:
            issue = {
                "description": None,
                "fingerprint": None,
                "severity": None,
                "location": {
                    "path": None,
                    "positions": {
                        "begin": {"line": None, "column": None},
                        "end": {"line": None, "column": None},
                    },
                },
            }
            issue["description"] = row["message"]
            issue["severity"] = SEVERITY_MAP[row["ranking"]]
            issue["location"]["path"] = os.path.relpath(row["path"], base_path)
            issue["location"]["positions"]["begin"]["line"] = int(row["line"])
            issue["location"]["positions"]["begin"]["column"] = int(row["column"])
            issue["location"]["positions"]["end"]["line"] = int(row["line"])
            issue["location"]["positions"]["end"]["column"] = int(row["column"])
            hash = hashlib.md5(json.dumps(issue, sort_keys=True).encode("utf-8")).hexdigest()
            issue["fingerprint"] = hash
            report.append(issue)
    return report


def write_code_quality_report(file_path: str, report: List[dict]):
    with open(file_path, "w+") as f:
        json.dump(report, f)


if __name__ == "__main__":
    args = parse_args()
    code_quality_report = generate_report_content(args.input, args.base_path)
    write_code_quality_report(args.output, code_quality_report)
